#pragma once

#if defined _WIN32 || defined _WIN64
    #define OS_WINDOWS
#elif defined __linux__
    #define OS_LINUX
    // me when i cant test if my stuff works on a mac without a mac
#endif

#include <stdint.h>
#include <stdbool.h>

typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
typedef uint64_t u64;
typedef int8_t i8;
typedef int16_t i16;
typedef int32_t i32;
typedef int64_t i64;
typedef float f32;
typedef double f64;
typedef unsigned char byte;
#define i32_MAX 2147483647

#define MAX(a,b) (((a) > (b)) ? (a) : (b))
#define MIN(a,b) (((a) < (b)) ? (a) : (b))
#define FLOOR(x) ((x) >= 0.0 ? (long long)(x) : (((long long)(x) == (x)) ? (x) : ((long long)(x) - 1)))

// conversion generated by chatgpt if its wrong oh well glhf
#define MB_TO_KB(mb) (mb * 1000)
#define MB_TO_B(mb) (mb * 1000000)
#define MB_TO_GB(mb) (mb / 1000.0) 
#define KB_TO_B(kb) (kb * 1000)
#define KB_TO_MB(kb) (kb / 1000.0)
#define KB_TO_GB(kb) (kb / 1000000.0) 
#define B_TO_KB(b) (b / 1000.0) 
#define B_TO_MB(b) (b / 1000000.0)
#define B_TO_GB(b) (b / 1000000000.0)
#define GB_TO_MB(gb) (gb * 1000)
#define GB_TO_KB(gb) (gb * 1000000)
#define GB_TO_B(gb) (gb * 1000000000)

#define GET_BITS(data, offset, bit_width) \
    ((data >> offset) & (((typeof(data))1 << bit_width) - 1))

#define SET_BITS(data, offset, bit_width, bits) \
    data = ((data & ~((((typeof(data))1 << bit_width) - 1) << offset)) | \
    ((bits & (((typeof(data))1 << bit_width) - 1)) << offset))

#if defined(__clang__) || defined(__gcc__)
#define STATIC_ASSERT _Static_assert
#else
#define STATIC_ASSERT static_assert
#endif

STATIC_ASSERT(sizeof(u8) == 1, "expected u8 to be 1 byte.");
STATIC_ASSERT(sizeof(u16) == 2, "expected u16 to be 2 bytes.");
STATIC_ASSERT(sizeof(u32) == 4, "expected u32 to be 4 bytes.");
STATIC_ASSERT(sizeof(u64) == 8, "expected u64 to be 8 bytes.");
STATIC_ASSERT(sizeof(i8) == 1, "expected i8 to be 1 byte.");
STATIC_ASSERT(sizeof(i16) == 2, "expected i16 to be 2 bytes.");
STATIC_ASSERT(sizeof(i32) == 4, "expected i32 to be 4 bytes.");
STATIC_ASSERT(sizeof(i64) == 8, "expected i64 to be 8 bytes.");
STATIC_ASSERT(sizeof(f32) == 4, "expected f32 to be 4 bytes.");
STATIC_ASSERT(sizeof(f64) == 8, "expected f64 to be 8 bytes.");

#define CLAMP(value, min, max) (value <= min) ? min : (value >= max) ? max : value;

#define true 1
#define false 0

// Inlining
#ifdef _MSC_VER
#define FORCEINLINE __forceinline
#define NOINLINE __declspec(noinline)
#else
#define FORCEINLINE static inline
#define NOINLINE
#endif